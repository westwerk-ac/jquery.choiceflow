{"name":"Jquery.choiceflow","tagline":"A or B could be a pain. With choiceflow it's flimsy.","body":"# jquery.choiceflow\r\n\r\nChoiceflow is a jQuery plugin that provides you with an easy way to display and hide parts of your website.\r\nIt can be used for step-by-step forms with a linear or decision based path.\r\nThe most basic configuration relies on html attributes and does not require you to write JavaScript.\r\n\r\n## Install\r\n\r\n```shell\r\nbower install westwerk-ac/jquery.choiceflow\r\n```\r\n\r\n## Usage\r\n\r\n### A basic flow\r\n\r\nTo build a flow you need only two things: links and blocks.\r\n\r\n* A **link** is a html element the user can click to display an block.\r\n* A **block** is a html element that can be shown by clicking links.\r\n\r\nA link can look like this:\r\n\r\n```html\r\n<span data-choiceflow-value=\"block2\">Next</span>\r\n```\r\n\r\nOr like this if you use bootstrap:\r\n\r\n```html\r\n<button type=\"button\" class=\"btn btn-primary\" data-choiceflow-value=\"block2\">Next</button>\r\n```\r\n\r\nThe corresponding block could be this:\r\n\r\n```html\r\n<div id=\"choiceflow-block-default-block2\"></div>\r\n```\r\n\r\nWhen clicking a link with `data-choiceflow-value=\"foo\"` the element with `id=\"choiceflow-block-default-foo\"` is shown.\r\nAll other blocks are hidden.\r\n\r\nYou cannot have blocks with identical ids. But you can display several blocks using one link with `data-choiceflow-value=\"foo,bar\"`.\r\n\r\n### Multiple flows\r\n\r\nYou can group flows using the `data-choiceflow-group` attribute:\r\n\r\n```html\r\n<span data-choiceflow-group=\"foo1\" data-choiceflow-value=\"bar2\">Next</span>\r\n<div id=\"choiceflow-block-foo1-bar2\"></div>\r\n```\r\n\r\nDefining no group is the same as having `data-choiceflow-group=\"default\"`.\r\n\r\nWhen clicking a link, only other blocks of the same group are hidden.\r\n\r\n### Active blocks and links\r\n\r\nAn element can only be a block if there is a corresponding link. All blocks are hidden per default.\r\nTo have a block shown per default, add `data-choiceflow-active=\"1\"` to at least one link that references the block.\r\n\r\n```html\r\n<span data-choiceflow-value=\"block1\" data-choiceflow-active=\"1\">Next</span>\r\n```\r\n\r\nSometimes you have a block that should be visible at first, but you don't want to link back to it.\r\nYou can achieve this by having a hidden link inside the block:\r\n\r\n```html\r\n<div id=\"choiceflow-block-default-block1\">\r\n\t<span data-choiceflow-value=\"block1\" data-choiceflow-active=\"1\" style=\"display: none;\"></span>\r\n</div>\r\n```\r\n\r\nAlternatively if you want to use JS:\r\n\r\n```js\r\njQuery(function($) {\r\n\t$('#choiceflow-block-default-block1').choiceflow('display');\r\n});\r\n```\r\n\r\nActive blocks have the `choiceflow-block-active` class set. Active links the `choiceflow-active` class.\r\n\r\nYou can check whether a block is active or not:\r\n\r\n```js\r\nif ($('choiceflow-block-foo-bar').choiceflow('is-active')) {\r\n\t// stuff\r\n}\r\n```\r\n\r\n### Customize showing and hiding of blocks\r\n\r\nPer default choiceflow uses jQuery's `show()` and `hide()`. You can overwrite those with the `choiceflow:show|hide' events.\r\n\r\nIf you want to add checks to determine if a block should be displayed use the `choiceflow:display|canShow|canHide` events instead.\r\n\r\n## Events\r\n\r\nWhen clicking a link or using js to display a block the following event are fired in that order:\r\n\r\n| Event | Fired | Can be used to ... |\r\n| ----- | ----- | ------------------ |\r\n| `choiceflow:display` | before displaying | ... validate and prevent the action. |\r\n| `choiceflow:canHide` | before displaying | ... validate and prevent the action. |\r\n| `choiceflow:canShow` | before displaying | ... validate and prevent the action. |\r\n| `choiceflow:hide` | before hiding a block | ... overwrite how the block is hidden. |\r\n| `choiceflow:afterHide` | after hiding a block | ... save changes and change styles. |\r\n| `choiceflow:show` | before showing a block | ... overwrite how the block is shown. |\r\n| `choiceflow:afterShow` | after showing a block | ... change styles. |\r\n| `choiceflow:afterDisplay` | after displaying | ... set focus, etc. |\r\n\r\n### `choiceflow:display`\r\n\r\nThis event is fired before anything else on *each* block that is going to be displayed, even if the block is already visible.\r\n\r\nThis event is called with 4 arguments: `(event, blocks, group, aborted)`.\r\n\r\n| Argument | Type | Description |\r\n| -------- | ---- | ----------- |\r\n| event | object | The default event object. |\r\n| blocks | array | The blocks that will be displayed. |\r\n| group | string | The group of the blocks. |\r\n| aborted | bool | Whether another event aborted this action. |\r\n\r\nIf you return `false`, the action is aborted for all blocks. The events `choiceflow:display`, `choiceflow:canHide` and `choiceflow:canShow` are still fired, but their results cannot change that the action is aborted.\r\n\r\nBe careful with overlapping events. The return value of the last event counts.\r\n\r\n### `choiceflow:canHide`\r\n\r\nThis event is identical with `choiceflow:display`, except that it is called on visible blocks that are going to be hidden.\r\n\r\nThis event suites great for form validation.\r\n\r\n#### Example\r\n\r\nIn the following scenario the block `choiceflow-block-foo-bar` can only be hidden if the user filled all inputs.\r\nAll attempts to move to another block will fail if this returns `false`;\r\n\r\n```js\r\n$('#choiceflow-block-foo-bar').on('choiceflow:canHide', function() {\r\n\tvar ok = true;\r\n\t$(this).find('input').each(function() {\r\n\t\tif ($(this).val() == \"\")\r\n\t\t\tok = false;\r\n\t});\r\n\treturn ok;\r\n});\r\n```\r\n\r\n### `choiceflow:canShow`\r\n\r\nThis event is identical with `choiceflow:display`, except that it is called on hidden blocks that are going to be shown.\r\n\r\n#### Example\r\n\r\nIn the following scenario the block `choiceflow-block-foo-bar` can only be shown if the user entered something in the input field with the id `inputName`.\r\n\r\n```js\r\n$('#choiceflow-block-foo-bar').on('choiceflow:canShow', function() {\r\n\treturn $('#inputName').val() != \"\";\r\n});\r\n```\r\n\r\n### `choiceflow:show` and `choiceflow:hide`\r\n\r\nThese events are fired on *each* block that is definitely going to be shown or hidden.\r\n\r\nThis event is called with 3 arguments: `(event, block, group)`.\r\n\r\n| Argument | Type | Description |\r\n| -------- | ---- | ----------- |\r\n| event | object | The default event object. |\r\n| block | string | The block that will be shown/hidden. |\r\n| group | string | The group of the block. |\r\n\r\nYou can use these events to overwrite the default show/hide action if you return `false`.\r\n\r\nYou should not try to prevent displaying here. Use the `choiceflow:display|canShow|canHide` events for that.\r\n\r\n#### Example\r\n\r\nThis will make the blocks smoothly slide up and down.\r\n\r\n```js\r\n$('[id^=\"choiceflow-block-\"]')\r\n\t// overwrite show event\r\n\t.on('choiceflow:show', function() {\r\n\t\t// show it smooth\r\n\t\t$(this).slideDown();\r\n\t\t// don't do the normal show stuff\r\n\t\treturn false;\r\n\t})\r\n\t// overwrite hide event\r\n\t.on('choiceflow:hide', function() {\r\n\t\t// hide it smooth\r\n\t\t$(this).slideUp();\r\n\t\t// don't do the normal hide stuff\r\n\t\treturn false;\r\n\t});\r\n```\r\n\r\n### `choiceflow:afterShow` and `choiceflow:afterHide`\r\n\r\nThese events are fired on *each* block immediately after it was shown or hidden. If multiple blocks are shown/hidden the `choiceflow:afterShow|afterHide` event is called before the next block's `choiceflow:show|hide` event.\r\n\r\nThis event is called with 3 arguments: `(event, block, group)`.\r\n\r\n| Argument | Type | Description |\r\n| -------- | ---- | ----------- |\r\n| event | object | The default event object. |\r\n| block | string | The block that was shown/hidden. |\r\n| group | string | The group of the block. |\r\n\r\nYou can use these events to apply css, set the focus, scoll to the block, etc.\r\n\r\n#### Example\r\n\r\nThis will focus on the first input element of the shown block.\r\n\r\n```js\r\n$('[id^=\"choiceflow-block-\"]').on('choiceflow:afterShow', function() {\r\n\t$(this).find('input').filter(':first').focus();\r\n});\r\n```\r\n\r\n### The `choiceflow:afterDisplay` event\r\n\r\nThis event is fired after each show and hide action is performed.\r\nIt is fired on *each* block that was displayed, even if it was visible before.\r\n\r\nThis event is called with 4 arguments: `(event, blocks, hiddenBlocks, group)`.\r\n\r\n| Argument | Type | Description |\r\n| -------- | ---- | ----------- |\r\n| event | object | The default event object. |\r\n| blocks | array | The blocks that were displayed. |\r\n| hiddenBlocks | array | The blocks that were hidden. |\r\n| group | string | The group of the block. |\r\n\r\nIf a link action is not performed, due to the `choiceflow:display|canShow|canHide` events, this event is not fired.\r\n\r\nIf a link does has no effect, because the blocks to show and hide were already shown or hidden, this event still fires.\r\n\r\n## Examples\r\n\r\n### Basic linear flow\r\n\r\nStep by step through 3 blocks.\r\n\r\n```html\r\n<div id=\"choiceflow-block-default-1\">\r\n\t<!-- make block 1 active -->\r\n\t<span style=\"display: none;\" data-choiceflow-value=\"1\" data-choiceflow-active=\"1\"></span>\r\n\tBLOCK 1\r\n\t<!-- link to block 2 -->\r\n\t<span data-choiceflow-value=\"2\">Next</span>\r\n</div>\r\n<div id=\"choiceflow-block-default-2\">\r\n\tBLOCK 2\r\n\t<!-- link to block 3 -->\r\n\t<span data-choiceflow-value=\"3\">Next</span>\r\n</div>\r\n<div id=\"choiceflow-block-default-3\">\r\n\tBLOCK 3\r\n</div>\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}